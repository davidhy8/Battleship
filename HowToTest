Instructions on how to test Battleship

Automatically:
1. Input in command line: javac -cp .:junit-4.12.jar:hamcrest-core-1.3.jar *.java
2. Input in command line: java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore SinglePlayerTest
3. 15 tests should be run and pass.
	a. test_Ship_Checker
		- tests the shipChecker method in Player to see if it recognizes a ship that has been sunk
			- by initializing a Battleship and setting its life to 0 from 4, the method should return true to show the ship has been sunk
	b. test_Rotate
		- tests the rotate method in Player to see if a ship rotates and changes orientation
			- by setting the current ship being looked at to battleship and rotating it, the method should return false to show that it is now horizontally oriented (default orientation is vertical)
	c. test_Overlapping_Ships
		- tests that no more than one ship can occupy a location
			- by intializing a Battleship and placing it on the default position on the grid (0,0) that spot should be solely occupied by the Battleship even when an attempt to place a Submarine at the same location occurs, resulting in "Battleship" being returned by the getShipName method for (0,0)
	d. test_Valid_Ship_Placement_Upper_Border_Vertical
		- tests that a ship cannot be placed beyond the upper border of the board
			- by initializing a Battleship and trying to place it above the upper border of the board, the method getYPos will return 0, indicating the default placing location has not been modified
	e. test_Valid_Ship_Placement_Upper_Border_Horizontal
		- tests that a ship cannot be placed beyond the upper border of the board
			- by initializing a Battleship and trying to place it above the upper border of the board, the method getYPos will return 0, indicating the default placing location has not been modified
	f. test_Valid_Ship_Placement_Left_Border_Vertical
		- tests that a ship cannot be placed beyond the left border of the board
			- by initializing a Battleship and trying to place it to the left of the left border of the board, the method getXPos will return 0, indicating the default placing location has not been modified		
	g. test_Valid_Ship_Placement_Left_Border_Horizontal
		- tests that a ship cannot be placed beyond the left border of the board
			- by initializing a Battleship and trying to place it to the left of the left border of the board, the method getXPos will return 0, indicating the default placing location has not been modified	
	h. test_Valid_Ship_Placement_Lower_Border_Vertical
		- tests that a ship cannot be placed beyond the lower border of the board
			- by initializing a Battleship and trying to place it below the lower border of the board, the method getYPos will return 0, indicating the default placing location has not been modified
	i. test_Valid_Ship_Placement_Lower_Border_Horizontal
		- tests that a ship cannot be placed beyond the lower border of the board
			- by initializing a Battleship and trying to place it below the lower border of the board, the method getYPos will return 0, indicating the default placing location has not been modified
	j. test_Valid_Ship_Placement_Right_Border_Vertical
		- tests that a ship cannot be placed beyond the right border of the board
			- by initializing a Battleship and trying to place it to the right of the right border of the board, the method getXPos will return 0, indicating the default placing location has not been modified
	k. test_Valid_Ship_Placement_Right_Border_Horizontal
		- tests that a ship cannot be placed beyond the right border of the board
			- by initializing a Battleship and trying to place it to the right of the right border of the board, the method getXPos will return 0, indicating the default placing location has not been modified
	l. test_Valid_Ship_Placement_Within_Bounds_Vertical
		- tests that a ship can be placed within the bounds of the board
			- by initializing a Battleship and trying to place it within the board, the method getXPos and getYPos should equal 1, returning true for the equality
	m.	test_Valid_Ship_Placement_Within_Bounds_Horizontal
		- tests that a ship can be placed within the bounds of the board
			- by initializing a Battleship and trying to place it within the board, the method getXPos and getYPos should equal 1, returning true for the equality
	n. test_Save_And_Load_File
		- tests that when a game is saved, it can be retrieved by loading it
			- by initializing a Battleship for each player and saving, the locations of ships should be the same as before when loaded, returning true via the method getHasShip
	o. test_Overwrite_Save_File
		- tests that when a game is saved and the user decides to not use the saved data, the new game's data is what's loaded later
			- by initializing a Battleship for each player and saving and then repeating this, the locations of ships should be the same as the most recent save when loaded, returning true via the method getHasShip
Manually:
1. Input in command line: java Main
	a. test_Ship_Checker
		- tests the shipChecker method in Player to see if it recognizes a ship that has been sunk
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on each button corresponding to a ship and place them at random locations on the Player Board 
			- press Done
			- click on the Enemy Board at random locations until a red square appears
			- the terminal output will print hit ship for each hit (every time a red square appears on the Enemy Board)
			- click on spots adjacent to the red square to determine the ship's orientation
			- continue to click adjacent spots following the determined orientation
			- the terminal output will print you have sunk my "___" to indicate that the ship has been sunk
	b. test_Rotate
		- tests the rotate method in Player to see if a ship rotates and changes orientation
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on the button Battleship
			- notice that the orientation in the terminal output is vertical
			- click Rotate
			- notice that the orientation in the terminal output is now horizontal
			- prove this is the case by placing the ship anywhere on the Player Board
	c. test_Overlapping_Ships
		- tests that no more than one ship can occupy a location
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on the button Battleship and place it at location (1,1)
			- click on the button Submarine and try to place it at location (1,1)
			- the terminal output will print "Sorry, that is not a valid ship placement" and the board will remain the same until the Submarine is placed at a valid location
	d. test_Valid_Ship_Placement_Upper_Border_Vertical
		- tests that a ship cannot be placed beyond the upper border of the board
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on the button Battleship and attempt to place it above the upper border
			- the terminal output will print "Ship placement is out of bounds"
	e. test_Valid_Ship_Placement_Upper_Border_Horizontal
		- tests that a ship cannot be placed beyond the upper border of the board
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on the button Battleship, click on the button rotate, and attempt to place it above the upper border
			- the terminal output will print "Ship placement is out of bounds"
	f.	test_Valid_Ship_Placement_Left_Border_Vertical
		- tests that a ship cannot be placed beyond the left border of the board
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on the button Battleship and attempt to place it to the left of the left border
			- the terminal output will print "Sorry, that is not a valid ship placement"
	g.	test_Valid_Ship_Placement_Left_Border_Horizontal
		- tests that a ship cannot be placed beyond the left border of the board
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on the button Battleship, click on the button rotate, and attempt to place it to the left of the left border
			- the terminal output will print "Sorry, that is not a valid ship placement"
	h. test_Valid_Ship_Placement_Lower_Border_Vertical
		- tests that a ship cannot be placed beyond the lower border of the board
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on the button Battleship and attempt to place it to below the lower border
			- the terminal output will print "Ship placement is out of bounds"
	i. test_Valid_Ship_Placement_Lower_Border_Horizontal
		- tests that a ship cannot be placed beyond the lower border of the board
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on the button Battleship, click on the button rotate, and attempt to place it below the lower border
			- the terminal output will print "Ship placement is out of bounds"	
	j.	test_Valid_Ship_Placement_Right_Border_Vertical
		- tests that a ship cannot be placed beyond the right border of the board
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on the button Battleship and attempt to place it to the right of the right border
			- the terminal output will print "Ship placement is out of bounds"
	k.	test_Valid_Ship_Placement_Right_Border_Horizontal
		- tests that a ship cannot be placed beyond the right border of the board
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on the button Battleship, click on the button rotate, and attempt to place it to the right of the right border
			- the terminal output will print "Ship placement is out of bounds"	
	l.	test_Valid_Ship_Placement_Within_Bounds_Vertical
		- tests that a ship can be placed within the bounds of the board
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on the button Battleship and place it at location (1,1)
	m.	test_Valid_Ship_Placement_Within_Bounds_Horizontal
		- tests that a ship can be placed within the bounds of the board
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on the button Battleship, click on the button rotate and place it at location (1,1)
	n. test_Save_And_Load_File
		- tests that when a game is saved, it can be retrieved by loading it
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on each ship button and place them randomly
			- click the Done button
			- click the Save button
			- close the window and relaunch the game
			- enter a name, choose "Single player", change Load game so "Yes" is displayed, and press "-" to have a board size of 7
			- the board should return to its previous state
	o. test_Overwrite_Save_File
		- tests that when a game is saved and the user decides to not use the saved data, the new game's data is what's loaded later
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on each ship button and place them randomly
			- click the Done button
			- click the Save button
			- close the window and relaunch the game
			- enter a name, choose "Single player", leave Load game at "No", and press "-" to have a board size of 7
			- press Start
			- click on each ship button and place them randomly
			- click the Done button
			- click the Save button
			- close the window and relaunch the game			
			- the board should return to the state from the last save